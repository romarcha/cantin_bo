PROJECT(BayesianOptimization CXX)
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} 
		      ${CMAKE_CURRENT_SOURCE_DIR}/cmake)

set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /opt/local/lib /opt/local/Library)
set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} /opt/local/include
/opt/local/Library)
set(CMAKE_PROGRAM_PATH ${CMAKE_PROGRAM_PATH} /opt/local/bin/ /opt/local/Library)


if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING 
      "Choose the type of build, options are: Debug Release 
      RelWithDebInfo MinSizeRel."
      FORCE)
endif(NOT CMAKE_BUILD_TYPE)

#SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -Wall -Wextra -Wdouble-promotion -Wpedantic -Wfloat-equal -Wno-endif-labels -Wshadow")
#SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS} -Wall -Wextra -Wdouble-promotion -Wpedantic -Wfloat-equal -Wno-endif-labels -Wshadow")

SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG ${CMAKE_CXX_FLAGS}")
SET(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG ${CMAKE_C_FLAGS}")

SET(CMAKE_CXX_FLAGS_DEBUG "-g -pg ${CMAKE_CXX_FLAGS}")
SET(CMAKE_C_FLAGS_DEBUG "-g -pg ${CMAKE_C_FLAGS}")
  
# enable warnings
ADD_DEFINITIONS("-Wall")
# ADD_DEFINITIONS("-Wextra -Wdouble-promotion -pedantic -Wfloat-equal -Wno-endif-labels -Wshadow")

SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

option(BUILD_PYTHON_INTERFACE "Build Python Interface?" OFF)
option(MATLAB_COMPATIBLE "Build library compatible with Matlab?" ON)

if(BUILD_PYTHON_INTERFACE)
  INCLUDE(PythonMagic)
  SET(PYTHON_LIB  ${PYTHON_LIBRARIES} )
  INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})
  SET(BUILD_SHARED_LIBS ON CACHE BOOL "Build shared libraries?" FORCE)
ELSE()
  SET(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libraries?")
ENDIF(BUILD_PYTHON_INTERFACE)

find_package( Boost REQUIRED )
if(Boost_FOUND)
   include_directories(${Boost_INCLUDE_DIRS})
else(Boost_FOUND)
   find_library(Boost boost PATHS /opt/local/lib)
   include_directories(${Boost_LIBRARY_PATH})
endif()

FIND_LIBRARY(NLOPT nlopt)

IF(NLOPT MATCHES NLOPT-NOTFOUND)
  SET(BUILD_NLOPT ON CACHE BOOL "Build included version of NLOPT?")
ELSE(NLOPT MATCHES NLOPT-NOTFOUND)
  SET(BUILD_NLOPT OFF CACHE BOOL "Build included version of NLOPT?")
ENDIF(NLOPT MATCHES NLOPT-NOTFOUND)

#SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE(UseDoxygen)

SET( BAYESOPT_SRCS
  ./src/bayesoptcont.cpp
  ./src/bayesoptdisc.cpp
  ./src/bayesoptbase.cpp
  ./src/inneroptimization.cpp
  ./src/gaussian_process.cpp
  ./src/gaussian_process_ign.cpp
  ./src/student_t_process.cpp
  ./src/nonparametricprocess.cpp
  ./src/parameters.cpp
  ./src/kernel_functors.cpp
  ./src/criteria_functors.cpp
  ./src/metacriteria_functors.cpp
  ./src/mean_functors.cpp
  )

SET(WRAPPPERS_SRC 
  ./wrappers/nloptwpr.cpp
  ./wrappers/bayesoptwpr.cpp
  )

IF(BUILD_PYTHON_INTERFACE)
  SET(PYTHON_SRC  ./python/bayesopt.cpp)
ELSE(BUILD_PYTHON_INTERFACE)
  SET(PYTHON_SRC )
ENDIF(BUILD_PYTHON_INTERFACE)


INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR}/include 
                     ${CMAKE_SOURCE_DIR}/wrappers
		     ${CMAKE_SOURCE_DIR}/utils )


LINK_DIRECTORIES( ${CMAKE_SOURCE_DIR}/lib )

IF(BUILD_NLOPT)
  ADD_SUBDIRECTORY(nlopt)
  include_directories(${CMAKE_SOURCE_DIR}/nlopt/api)
ENDIF(BUILD_NLOPT)

ADD_LIBRARY(bayesopt
  ${BAYESOPT_SRCS}   
  ${WRAPPPERS_SRC}
  ${PYTHON_SRC}
  )

IF(MATLAB_COMPATIBLE)
  SET_TARGET_PROPERTIES(bayesopt PROPERTIES COMPILE_FLAGS "-fPIC")
ENDIF()

IF(BUILD_SHARED_LIBS AND NOT MSYS)
  SET_TARGET_PROPERTIES(bayesopt PROPERTIES PREFIX "" SUFFIX ".so")
ENDIF()

IF(BUILD_NLOPT)
  add_dependencies(bayesopt nlopt)
  SET(EXT_LIBS nlopt)
ELSE(BUILD_NLOPT)
  SET(EXT_LIBS ${NLOPT})
ENDIF(BUILD_NLOPT)

TARGET_LINK_LIBRARIES(bayesopt
  ${EXT_LIBS} ${PYTHON_LIB} )

#Naive test
ADD_EXECUTABLE(bayesopttest ./app/testbayesopt.cpp)
add_dependencies(bayesopttest bayesopt)
TARGET_LINK_LIBRARIES(bayesopttest bayesopt)

#Discrete test
ADD_EXECUTABLE(discretetest ./app/testdiscrete.cpp)
add_dependencies(discretetest bayesopt)
TARGET_LINK_LIBRARIES(discretetest bayesopt)

#1D test
ADD_EXECUTABLE(bayesoptonedtest ./app/testbopt_oned.cpp)
add_dependencies(bayesoptonedtest bayesopt)
TARGET_LINK_LIBRARIES(bayesoptonedtest bayesopt)

#Branin
ADD_EXECUTABLE(branintest ./app/testbranin.cpp )
add_dependencies(branintest bayesopt)
TARGET_LINK_LIBRARIES(branintest bayesopt)

#Test for random number generator
#ADD_EXECUTABLE(randtest ./app/testrand.cpp)


INSTALL(FILES ./include/bayesoptcont.hpp 
              ./include/bayesoptdisc.hpp 
	      ./wrappers/bayesoptwpr.h 
	DESTINATION include)

INSTALL(
  TARGETS bayesopt
  LIBRARY DESTINATION lib
  ARCHIVE DESTINATION lib
)
